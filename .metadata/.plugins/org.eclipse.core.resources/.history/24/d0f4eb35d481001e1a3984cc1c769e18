/*
 * API_debounce.c
 *
 *  Created on: Nov 12, 2023
 *      Author: hollerller
 */

#include <stdio.h>
#include "API_debounce.h"
#include "main.h"
#include "stm32f4xx_hal.h"

// Private declarations

typedef enum{
BUTTON_UP,
BUTTON_FALLING,
BUTTON_DOWN,
BUTTON_RAISING,
} debounceState_t;		// Save the FMS states

static const uint8_t DEBOUNCETIME = 40; // Debounce delay constant

delay_t debounceDelay;
tick_t initialDelay = DEBOUNCETIME;
static debounceState_t debounceState;
static bool_t edgeDetected;

void buttonPressed();
void buttonReleased();

void debounceFSM_init(){
	debounceState = BUTTON_UP;
	delayInit(&debounceDelay, initialDelay);
	edgeDetected = false;
}

void debounceFSM_update(){

	uint8_t buttonState = HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin);

	//bool_t debounceFinished = delayRead(&debounceDelay);
	switch (debounceState){

	case BUTTON_UP:

		if (!buttonState) {
			debounceState = BUTTON_FALLING;
			delayInit(&debounceDelay, 40);
		}
	break;

	case BUTTON_FALLING:

		if (delayRead(&debounceDelay)){
			if (!buttonState) {
				debounceState = BUTTON_DOWN;
				buttonPressed();
			} else {
				debounceState = BUTTON_UP;
			}
		}

		break;

	case BUTTON_DOWN:

		if (buttonState) {
			debounceState = BUTTON_RAISING;
			//delayWrite(&debounceDelay, 40);
			delayInit(&debounceDelay, 40);
		}

		break;


	case BUTTON_RAISING:

		if (delayRead(&debounceDelay)){
			if (buttonState) {
				debounceState = BUTTON_UP;
				buttonReleased();
			} else {
				debounceState = BUTTON_DOWN;
			}
		}

		break;

	default:

		debounceState = BUTTON_UP;

		break;

	}
}

void buttonPressed(){
	edgeDetected = true;
}


void buttonReleased(){
	edgeDetected = false;
}

bool_t readKey(){
	bool_t keyState =


	return keyState;
}
